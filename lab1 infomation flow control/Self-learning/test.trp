(*   add from 1 to 100
let 
fun add x =
if x >= 2 then print x; add (x-1) + x
		 else 1

in add 100
end
*)

(*    case 
let
fun hello x = 
	case x of
		1 => 5
	|	2 => 10

fun world x = x + 2
in 
hello 1 + world 2
end
*)


(*
let 
	fun add(x,y) = x + y
in 
	add(2,3)
end
*)

(*    
import lists
let fun printwait(x) =  sleep(1);printWithLabels(x) 
fun foo () = map printwait [1 ,2 ,3]
fun bar () = map printwait [ " A " , " B " , " C " ]
in ( spawn foo , spawn bar )
end
*)

(*
let fun foo () =
		receive [ hn x => printWithLabels ( " foo received " , x )]
	val p = spawn foo
in send (p , " hello " )
end
*)


(*
let 
	fun timeout(p, r, t) = 
		sleep t; 
		send (p , (r, "hello my friend"))
	val p = self()
	val r = mkuuid()
	val _ = spawn(fn () => timeout(p, r, 1000))
	fun print_msg(from, content) = 
		print("---------------------------------------");
		print("From Address:"); 
		print(from); 
		print("Info:"); 
		print(content); 
		print("---------------------------------------")
in 
	receive [hn (r, info) => print_msg(r, info)]
end
*)









(*
import timeout
let 
	fun v_one n =
		receive [
			hn ("REQUEST", senderid) =>
				send (senderid , n); v_one (n + 1),
				(*let 
					val _ = send (senderid , n)
				in 
					v_one (n + 1)
				end,*)

			hn ("UPDATE", newversion) => 
				newversion(n)
			]

	val service = spawn(fn () => v_one(0))
	val _ = send (service , ("REQUEST" , self()))
	val _ = receive[hn x => print x]
	val _ = send (service , ("REQUEST" , self()))
	val _ = receive[hn x => print x]
	val _ = send (service , ("REQUEST" , self()))
	val _ = receive[hn x => print x]
	val _ = send (service , ("REQUEST" , self()))
	val _ = receive[hn x => print x]


	fun v_two n =
		receive [ 
			hn("REQUEST", senderid) =>
				send(senderid , n); v_two(n + 1), 
			hn("COMPUTE", senderid, f, x) =>
				send(senderid , f(x)); v_two(n + 1), 
			hn("UPDATE" , newversion) => newversion(n)
			]

	fun sum_v1(x) = x*x + 1000000
	val _ = send (service , ("UPDATE", v_two))
	val _ = send (service , ("COMPUTE", self() ,sum_v1, 42))
	val _ = receive [hn x => print x ]
	val _ = send (service , ("REQUEST" , self()))
	val _ = receive[hn x => print x]
in 
	exitAfterTimeout authority 1000 0 "hello"
end
*)



(*
let val x = 10 raisedTo { alice }
val y = 20 raisedTo { com }
in x + y
end
*)


(*
let val x = 10 raisedTo { secret }
val p = self ()
val _ = spawn ( fn () => if x > 0
						then send (p , 1)
						else send (p , 0) )
in rcvp ({ secret } , [ hn x => x ])
end
*)



(*
let
	fun append ([], l) = [l]
  	| append (h::t, l) = h :: append (t, l)

	val empty = [1,2,3]
	val a = append(empty, 1)
in
	print(a)
end
*)


let
	val lev = {bob}
	val a = 1 raisedTo lev
in 
	a
end


