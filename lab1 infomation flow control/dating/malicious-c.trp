(* Placeholder for the dating-client. Note that in order to communicate 
   with your server you will need to create the corresponding trustmap *)
   
let 
	val lev = {carl}
	val name = "carl"  raisedTo lev
	val year = 1997  raisedTo lev
	val gender = true  raisedTo lev
	val interests = ["bike", "ping pong"]  raisedTo lev

	fun agent(lev, name, year, gender, interests) =
		let 
			val client_addr = whereis("QmbhE2Mc9S5ryo71bozWmsGuKWwcwZEPBnyHS2LcnRQAec","client") (*carl -> client*)
			val _ = send(client_addr, ("new", lev))
			val _ = if gender then sleep 8000 else ()
		in
			if(false) 
			then 
				(true, (lev, name, year, gender, interests)) 
			else 
				(false, ())
		end

	val server_addr = whereis ("QmTi7KZUeWG8rgamV2tdU7FdED7GZ8MubPQc6fcpNeyQVJ", "datingServer")
	val _ = send(server_addr, ("NEWPROFILE", ((lev, name, year, gender, interests), agent, self())))
	val _ = register("client", self(), authority)
	val FirstTime = getTime()
	fun startClient(FirstTime, lastLev) = receive[
							hn ("NEWMATCH", (lev, name, year, gender, interests)) => 
								let 
									val _ = print("--------------------------new match---------------------------")
									val _ = print(name)
									val _ = print(year)
									val _ = if(gender) then print("male") else print("female")
									val _ = print(interests)
								in
									startClient()
								end,
							hn ("NOMATCH") => 
								print("finished"),
							hn ("new", lev) =>
								let
									val delta = (getTime() - FirstTime)
								in 
									if (lastLev = {default})
									then
										startClient(getTime(), lev)
									else
										if (delta > 6000)
											then 
												print("new");
												print(lastLev);
												print("gender: female");
												startClient(getTime(), lev)
											else
												print("new");
												print(lastLev);
												print("gender: male");
												startClient(getTime(), lev)
								end

							]
in 
	startClient(getTime(), {default})
end
