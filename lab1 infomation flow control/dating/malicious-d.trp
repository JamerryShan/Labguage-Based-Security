(* Placeholder for the dating-client. Note that in order to communicate 
   with your server you will need to create the corresponding trustmap *)
   
let 
	val lev = {delft}
	val name = "delft"  raisedTo lev
	val interests = ["beer", "winter", "wars", "swords"]  raisedTo lev

	fun agent(lev, name, year, gender, interests) =
			if(name = "delft") 
			then 
				(false, ())
			else 
				(true, (lev, name, year, gender, interests)) 

	val server_addr = whereis ("QmTi7KZUeWG8rgamV2tdU7FdED7GZ8MubPQc6fcpNeyQVJ", "datingServer")

	fun send_msg() = 
		send(server_addr, ("NEWPROFILE", ((lev, name, 2100, true, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2101, true, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2102, true, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2103, true, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2104, true, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2105, true, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2106, true, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2100, false, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2101, false, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2102, false, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2103, false, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2104, false, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2105, false, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2106, false, interests), agent, self())));
		send(server_addr, ("NEWPROFILE", ((lev, name, 2107, false, interests), agent, self())))
		
	val _ = send_msg()
	val _ = register("client", self(), authority)
	fun startClient() = receive[ 
							hn ("NEWMATCH", (lev, name, year, gender, interests)) => 
								let 
									val _ = print("--------------------------new match---------------------------")
									val _ = print(name)
									val _ = print(year)
									val _ = if(gender) then print("male") else print("female")
									val _ = print(interests)
								in
									startClient()
								end,
							hn ("NOMATCH") => 
								print("no macth");
								print("Please wait for further matches");
								startClient(),
							hn ("new", lev) =>
								print("new");
								print(lev);
								startClient()
							]
in 
	startClient()
end
